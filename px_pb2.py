# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: px.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='px.proto',
  package='proxyASR',
  syntax='proto3',
  serialized_pb=_b('\n\x08px.proto\x12\x08proxyASR\"\x1e\n\x0bStreamChunk\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\x0c\x32O\n\x08Listener\x12\x43\n\rDoChunkStream\x12\x15.proxyASR.StreamChunk\x1a\x15.proxyASR.StreamChunk\"\x00(\x01\x30\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_STREAMCHUNK = _descriptor.Descriptor(
  name='StreamChunk',
  full_name='proxyASR.StreamChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='proxyASR.StreamChunk.content', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=52,
)

DESCRIPTOR.message_types_by_name['StreamChunk'] = _STREAMCHUNK

StreamChunk = _reflection.GeneratedProtocolMessageType('StreamChunk', (_message.Message,), dict(
  DESCRIPTOR = _STREAMCHUNK,
  __module__ = 'px_pb2'
  # @@protoc_insertion_point(class_scope:proxyASR.StreamChunk)
  ))
_sym_db.RegisterMessage(StreamChunk)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ListenerStub(object):
  """The Listener service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DoChunkStream = channel.stream_stream(
        '/proxyASR.Listener/DoChunkStream',
        request_serializer=StreamChunk.SerializeToString,
        response_deserializer=StreamChunk.FromString,
        )


class ListenerServicer(object):
  """The Listener service definition.
  """

  def DoChunkStream(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ListenerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DoChunkStream': grpc.stream_stream_rpc_method_handler(
          servicer.DoChunkStream,
          request_deserializer=StreamChunk.FromString,
          response_serializer=StreamChunk.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proxyASR.Listener', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaListenerServicer(object):
  """The Listener service definition.
  """
  def DoChunkStream(self, request_iterator, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaListenerStub(object):
  """The Listener service definition.
  """
  def DoChunkStream(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Listener_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('proxyASR.Listener', 'DoChunkStream'): StreamChunk.FromString,
  }
  response_serializers = {
    ('proxyASR.Listener', 'DoChunkStream'): StreamChunk.SerializeToString,
  }
  method_implementations = {
    ('proxyASR.Listener', 'DoChunkStream'): face_utilities.stream_stream_inline(servicer.DoChunkStream),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Listener_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('proxyASR.Listener', 'DoChunkStream'): StreamChunk.SerializeToString,
  }
  response_deserializers = {
    ('proxyASR.Listener', 'DoChunkStream'): StreamChunk.FromString,
  }
  cardinalities = {
    'DoChunkStream': cardinality.Cardinality.STREAM_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'proxyASR.Listener', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
